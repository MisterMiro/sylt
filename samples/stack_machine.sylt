## implementation of a calculator using a stack

let OpCode = makeEnum([
    "Push"
    "Add"
    "Sub"
    "Mul"
    "Div"
    "Eq"
    "Print"
    "Ret"
])

let exec program = do
    ensure(List.last(program) is OpCode.Ret)
    
    let ip = 0
    let stack = []

    let read = fun -> do
        ip += 1
        List.get(ip - 1 program)
    end

    let push value = List.push(value stack)
    let pop = fun -> List.pop(stack)

    let run = true
    while run do
        let code = read()

        if code is OpCode.Push then
            stack += read()
        else if code is OpCode.Add then do
            let b = pop()
            let a = pop()
            push(a + b)
        end
        else if code is OpCode.Sub then do
            let b = pop()
            let a = pop()
            push(a - b)
        end
        else if code is OpCode.Mul then do
            let b = pop()
            let a = pop()
            push(a * b)
        end
        else if code is OpCode.Div then do
            let b = pop()
            if b is 0 then return "tried to divide a number by zero"
            let a = pop()
            push(a / b)
        end
        else if code is OpCode.Eq then do
            let b = pop()
            let a = pop()
            push(a is b)
        end
        else if code is OpCode.Print then
            printLn(List.last(stack))
        else if code is OpCode.Ret then
            run <- false
    end

    "success!"
end

let compile input = do
    let program = []

    let ops = {
        "+" = OpCode.Add
        "-" = OpCode.Sub
        "*" = OpCode.Mul
        "/" = OpCode.Div
        "=" = OpCode.Eq
    }
    let tokens = String.split([" "] input)

    List.forEach(
        fun token -> List.push(Dict.getOrDefault(token toNumber(token) ops))
        tokens)

    program
end

let input = "1 2 + 10 * 0.9375 / 16 - 8 - 8 ="
let program = compile(input)

let result = exec(program)
printLn(result)

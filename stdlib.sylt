## implementations of some higher-order
## functions; these will be moved to
## native code in the future

let rep(n, f) = {
	let loop(i) =
		if (i < n) {
			f(i)
			loop(i + 1)
		}
	
	loop(0)
}

let List.forEach(list, f) = {
	let loop(i) =
		if (i < List.length(list)) {
			f(i, list[i])
			loop(i + 1)
		}
		
	loop(0)
}

let List.map(list, f) = {
	let result = []
	List.forEach(list, fun(i, value) ->
		List.push(result, f(value))
	)
	result
}

let List.filter(list, f) = {
	todo()
}

let List.fold(list, f, init) = {
	todo()
}

let List.sort(list, f) = {
	todo()
}

let List.concat(a, b) = {
	let result = []
	List.forEach(a, fun(_, v) ->
		List.push(result, v))
	List.forEach(b, fun(_, v) ->
		List.push(result, v))
	result
}

let List.flatten(list) = {
	let result = []
	List.forEach(list, fun(i, item) ->
		if (typeOf(item) = "List") {
			result <- List.concat(result,
					List.flatten(item))
		} else List.push(result, item)
	)
		
	result
}

let List.any(list, f) = {
	let loop(i) =
		if (i < List.length(list)) {
			if (f(list[i])) true
			else loop(i + 1)
		} else false
		
	loop(0)
}

let List.all(list, f) = {
	let loop(i) =
		if (i < List.length(list)) {
			if (!f(list[i])) false
			else loop(i + 1)
		} else true
		
	loop(0)
}

let String.trim(s) = {
	s <- String.trimStart(s)
	s <- String.trimEnd(s)
	s
}

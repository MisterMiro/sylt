## note: most of the standard library is
## implemented in C, with only a small portion
## implemented here

## Prelude   |
## ===========

let isEven(n) = n % 2 = 0
let isOdd(n) = n % 2 = 1
let isZero(n) = n = 0
let isOne(n) = n = 1
let isPositive(n) = n >= 0
let isNegative(n) = n < 0

let rep(n, f) = {
	let i = 0
	while (i < n) {
		f(i)
		i <- i + 1
	}
}

## List      |
## ===========

let List.iter(list, f) =
	rep(List.length(list), fun(i) ->
		f(i, list[i]))

let List.forEach(list, f) =
	rep(List.length(list), fun(i) ->
		f(list[i]))

let List.map(list, f) = {
	let mapped = []
	List.forEach(list, fun(value) ->
		List.push(mapped, f(value)))
	mapped
}

let List.filter(list, f) = {
	let filtered = []
	List.forEach(list, fun(value) ->
		if (f(value))
			List.push(filtered, value))
	filtered
}

let List.fold(list, init, f) = {
	let folded = init
	List.forEach(list, fun(value) ->
		folded <- f(folded, value))
	folded
}

let List.sum(list) =
	List.fold(list, 0, fun(sum, value) ->
		sum + value)

let List.average(list) =
	if (List.isEmpty(list)) 0
	else List.sum(list) / List.length(list)
	
let List.mean(list) = 
	if (isOdd(List.length(list)))
		list[List.length(list) / 2]
	else
		List.average([
			list[List.length(list) / 2 - 1],
			list[List.length(list) / 2]])

let List.flatten(list) = {
	let flat = []
	List.forEach(list, fun(item) ->
		if (typeOf(item) = "List")
			flat <- flat ++ List.flatten(item)
		else
			List.push(flat, item))
	flat
}

let List.any(list, f) =
	List.fold(list, false, fun(any, val) ->
		any or f(val))

let List.all(list, f) =
	List.fold(list, true, fun(all, val) ->
		all and f(val))

## String    |
## ===========

let String.leftPad(str, w, ch) = {
	let n = (w - String.length(str))
		/ String.length(ch)
	
	let text = ""
	rep(n, fun(_) -> text <- text ++ ch)
	text ++ str
}

let String.rightPad(str, w, ch) = {
	let n = (w - String.length(str))
		/ String.length(ch)
	
	let text = str
	rep(n, fun(_) -> text <- text ++ ch)
	text
}

let String.centerPad(str, w, ch) = {
	let n = (w - String.length(str))
		/ String.length(ch)
	
	let text = ""
	rep(n / 2, fun(_) -> text <- text ++ ch)
	text <- text ++ str
	rep(n / 2, fun(_) -> text <- text ++ ch)
	text
}

let String.fmt(str) = {
	let chars = String.chars(str)
	let text = ""
	let expr = ""
	
	let i = 0
	let inExpr = false
	while (i < List.length(chars)) {
		if (chars[i] = "%") {
			inExpr <- !inExpr
			
			if (inExpr) {
				## start of expression
				i <- i + 1
			
			} else {
				## end of expression
				let value = eval(expr)
				let value = asString(value)
				text <- text ++ value
						
				i <- i + String.length(expr)
				expr <- ""
			}
			
		} else {
			if (inExpr)
				expr <- expr ++ chars[i]
			else
				text <- text ++ chars[i]
			i <- i + 1
		}
	}
	
	if (inExpr)
		Sys.halt("unterminated interpolation")
	
	text
}

## Math      |
## ===========

let Math.factorial(n) =
	if (n >= 1) n * Math.factorial(n - 1)
	else 1

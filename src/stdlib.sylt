
## note: most of the standard library is implemented in C
ensure(System.version is "sylt 0.1")

let isZero num = num is 0
let isOne num = num is 1
let isEven num = isZero(num % 2)
let isOdd num = isOne(num % 2)
let isPositive num = Math.signum(num) is Math.Sign.Positive
let isNegative num = Math.signum(num) is Math.Sign.Negative

let half num = num / 2
let twice num = num * 2
let squared num = num * num

let add a b = a + b
let sub a b = a - b
let mul a b = a * b
let div a b = a / b
let rem a b = a % b

let for fn start end = do
    let i = start
	while i < end do
		fn(i)
		i += 1
	end
end

let rep fn n = for(fn 0 n)

let makeEnum list = do
	let enum = {}
	List.iter(
        fun index name -> Dict.set(name index enum)
        list)
	enum
end

module List is
    let first list = List.get(0 list)

    let last list = List.get(-1 list)

    let push value list = list += value

    let pop list = do
        let value = List.last(list)
        list -= 1
        value
    end

    let swap a b list = do
        let temp = List.get(a list)
        List.set(a List.get(b list) list)
        List.set(b temp list)
    end

    let init value n = do
        let list = []
        rep(fun _ -> List.push(value list) n)
        list
    end

    let range from to = do
        let list = []
        for(fun num -> List.push(num list) from to + 1)
        list
    end

	let iter fn list = rep(
        fun index -> fn(index List.get(index list))
        #list)

	let forEach fn list = rep(
        fun index -> fn(List.get(index list))
        #list)

    let copy original = do
        let new = []
        List.forEach(fun item -> new += item original)
        new
    end

	let map fn list = do
		let mapped = []
		List.forEach(
            fun item -> mapped += fn(item)
            list)
		mapped
	end

	let filter fn list = do
		let filtered = []
		List.forEach(
            fun item -> if fn(item) then filtered += item
            list)
		filtered
	end

	let fold fn init list = do
		let result = init
		List.forEach(
            fun item -> result <- fn(result item)
            list)
		result
	end

	let sum list = List.fold(add 0 list)

	let average list = if list is [] then 0
        else List.sum(list) / #list

	let mean list = if isOdd(#list) then List.get(half(#list) list)
		else List.average([
			List.get(half(#list) - 1 list)
			List.get(half(#list) list)])

	let sortBy fn list = do
        list <- List.copy(list)

		let bubbleSort list n = do
			let swapped = 0

			rep(fun i -> do
				if fn(List.get(i list) List.get(i + 1 list)) then do
					List.swap(i i + 1 list)
					swapped += 1
				end
			end n - 1)

			if not isZero(swapped) then bubbleSort(list n - 1)
		end

		if #list > 1 then bubbleSort(list #list)
        list
	end

	let sort list = List.sortBy(fun a b -> a > b list)

	let flatten list = do
		let flat = []
		List.forEach(
            fun item -> flat +=
                if typeOf(item) is "List" then List.flatten(item)
                else item
            list)
		flat
	end

	let dedup list = do
		let deduped = []
		List.forEach(
            fun item -> if not List.contains(item deduped) then
                deduped += item
            list)
		deduped
	end

	let any fn list = List.fold(
        fun any value -> any or fn(value)
        false
        list)

	let all fn list = if list is [] then false
        else List.fold(
            fun all value -> all and fn(value)
            true
            list)

    let count value list = do
        let count = 0
        List.forEach(
            fun item -> if item is value then count += 1
            list)
        count
    end

    let contains value list = List.count(value list) > 0

    let find value list = do
        let index = 0
        let found = false

        while not found do
            if List.get(index list) is value then found <- true
            else index += 1
        end

        index
    end
end

module Dict is
	let getOrDefault key default dict =
        if Dict.hasKey(key dict) then Dict.get(key dict)
        else default

	let iter fn dict = List.forEach(
        fun key -> fn(key Dict.get(key dict))
        Dict.keys(dc))

	let toList dict = do
		let ls = []
		Dict.iter(fun k v -> ls += [[k v]] dict)
		ls
	end
end

module String is
	let leftPad str width pattern = do
		let text = ""
		let n = (width - #str) / #pattern

		rep(fun _ -> text += pattern n)
		text + str
	end

	let rightPad str width pattern = do
		let text = str
		let n = (width - #str) / #pattern

		rep(fun _ -> text += pattern n)
		text
	end

	let centerPad str width pattern = do
		let text = ""
		let n = (width - #str) / #pattern

		rep(fun _ -> text += pattern half(n))
		text += str
		rep(fun _ -> text += pattern half(n))
		text
	end
end

module File is
	let Mode = makeEnum([
		"Read"
		"ReadBinary"
		"Write"
		"WriteBinary"
		"Append"
		"AppendBinary"
	])
end

module Math is
	let Sign = makeEnum(["Negative" "Zero" "Positive"])

	let signum n = if n < 0 then Sign.Negative
		else if n is 0 then Sign.Zero
		else Sign.Positive

    let min a b = if a < b then a else b

    let max a b = if a > b then a else b

    let clamp x lo hi = if x < lo then lo
        else if x > hi then hi
        else x

    let lerp a b t = a * (1 - t) + b * t
end

module Vec3 is
	let new x y z = {
		"x" = x
		"y" = y
		"z" = z
	}

	let dot a b = a.x * b.x + a.y * b.y + a.z * b.z

	let cross a b = Vec3.new(
		a.y * b.z - a.z * b.y
		a.z * b.x - a.x * b.z
		a.x * b.y - a.y * b.x)

	let sizeSquared v = Vec3.dot(v v)

	let size v = Math.sqrt(sizeSquared(v))

	let norm v = Vec3.new(
		v.x / Vec3.size(v)
		v.y / Vec3.size(v)
		v.z / Vec3.size(v))

	let add a b = Vec3.new(
		a.x + b.x
		a.y + b.y
		a.z + b.z)

	let sub a b = Vec3.new(
		a.x - b.x
		a.y - b.y
		a.z - b.z)

	let mul a b = Vec3.new(
		a.x * b.x
		a.y * b.y
		a.z * b.z)

	let div a b = Vec3.new(
		a.x / b.x
		a.y / b.y
		a.z / b.z)

	let addScalar v s = Vec3.new(
		v.x + s
		v.y + s
		v.z + s)

	let subScalar v s = Vec3.new(
		v.x - s
		v.y - s
		v.z - s)

	let mulScalar v s = Vec3.new(
		v.x * s
		v.y * s
		v.z * s)

	let divScalar v s = Vec3.new(
		v.x / s
		v.y / s
		v.z / s)
end

module Rand is
	let oneIn n = Rand.range(0 n) < 1

    let fiftyFifty _ = oneIn(2)

	let item list = List.get(Rand.range(0 #list) list)

	let scramble list = List.sortBy(fun _ _ -> fiftyFifty() list)
end

## note: most of the standard library is
## implemented in C

## Prelude   |
## ===========

let isZero(n) = n = 0
let isOne(n) = n = 1
let isPositive(n) = n >= 0
let isNegative(n) = n < 0
let isEven(n) = n % 2 = 0
let isOdd(n) = n % 2 = 1

let incr(n) = n + 1
let decr(n) = n - 1

let add(a b) = a + b
let sub(a b) = a - b
let mul(a b) = a * b
let div(a b) = a / b
let rem(a b) = a % b

let rep(f n) = do
	let i = 0
	while (i < n) do
		f(i)
		i <- incr(i)
	end
end

## List      |
## ===========

let impl = do
	let iter(f ls) = rep(fun i -> f(i List.get(i ls)) List.length(ls))
	let forEach(f ls) = rep(fun i -> f(List.get(i ls)) List.length(ls))

	let map(f ls) = do
		let mapped = []
		List.forEach(fun value -> List.push(mapped f(value)) ls)
		mapped
	end

	let filter(f ls) = do
		let filtered = []
		List.forEach(fun value -> if f(value): List.push(filtered value) ls)
		filtered
	end

	let fold(f init ls) = do
		let folded = init
		List.forEach(fun value -> folded <- f(folded value) ls)
		folded
	end

	let sum(ls) = List.fold(add 0 ls)
	let average(ls) = if ls = []: 0 else List.sum(ls) / List.length(ls)
		
	let mean(ls) = 
		if isOdd(List.length(ls)): List.get(List.length(ls) / 2 ls)
		else List.average([
			List.get(List.length(ls) / 2 - 1 ls)
			List.get(List.length(ls) / 2 ls)])

	let sortBy(f ls) = do
		let bubbleSort(ls n) = do
			let swapped = 0

			rep(fun i -> do
				if f(List.get(i ls) List.get(i + 1 ls)): do
					List.swap(i i + 1 ls)
					swapped <- incr(swapped)
				end
			end n - 1)

			if swapped != 0: bubbleSort(ls n - 1)
		end

		let n = List.length(ls)
		if n > 1: bubbleSort(ls n)
	end

	let sort(ls) = sortBy(fun a b -> a > b ls)

	let flatten(ls) = do
		let flat = []
		List.forEach(fun item ->
			if typeOf(item) = "List": flat <- flat + List.flatten(item)
			else List.push(flat item) ls)
		flat
	end

	let dedup(ls) = do
		let deduped = []
		List.forEach(fun item ->
			if !List.contains(deduped item):
				List.push(deduped item) ls)
		deduped
	end

	let any(f ls) = List.fold(fun any value -> any or f(value) false ls)

	let all(f ls) = List.fold(fun all value -> all and f(value) true ls)

	let lib = Dict.get("List" gdict)
	Dict.set("iter" iter lib)
	Dict.set("forEach" forEach lib)
	Dict.set("map" map lib)
	Dict.set("filter" filter lib)
	Dict.set("fold" fold lib)
	Dict.set("sum" sum lib)
	Dict.set("average" average lib)
	Dict.set("mean" mean lib)
	Dict.set("sortBy" sortBy lib)
	Dict.set("sort" sort lib)
	Dict.set("flatten" flatten lib)
	Dict.set("dedup" dedup lib)
	Dict.set("any" any lib)
	Dict.set("all" all lib)
end

## String    |
## ===========

let impl = do
	let leftPad(str w pattern) = do
		let text = ""
		rep(fun _ -> text <- text + pattern (w - String.length(str)) / String.length(pattern))
		text + str
	end

	let rightPad(str w pattern) = do
		let text = str
		rep(fun _ -> text <- text + pattern (w - String.length(str)) / String.length(pattern))
		text
	end

	let centerPad(str w pattern) = do
		let text = ""
		let n = (w - String.length(str)) / String.length(pattern)

		rep(fun _ -> text <- text + pattern n / 2)
		text <- text + str
		rep(fun _ -> text <- text + pattern n / 2)
		text
	end

	let fmt(str) = do
		let chars = String.chars(str)
		let text = ""
		let expr = ""
		
		let i = 0
		let inExpr = false
		while (i < List.length(chars)) do
			if List.get(i chars) = "%": do
				inExpr <- !inExpr
				
				if inExpr:
					## start of expression
					i <- incr(i)
				else do
					## end of expression
					let value = eval(expr)
					let value = toString(value)
					text <- text + value
							
					i <- i + String.length(expr)
					expr <- ""
				end
				
			end else do
				if inExpr: expr <- expr + List.get(i chars)
				else text <- text + List.get(i chars)
				i <- incr(i)
			end
		end
		
		if inExpr: Sys.halt("unterminated interpolation")
		
		text
	end

	let lib = Dict.get("String" gdict)
	Dict.set("leftPad" leftPad lib)
	Dict.set("rightPad" rightPad lib)
	Dict.set("centerPad" centerPad lib)
	Dict.set("fmt" fmt lib)
end

let impl = do
	let fiftyFifty() = Rand.range(0 1) > 0.5
	let scramble(ls) = List.sortBy(fun _ _ -> fiftyFifty() ls)

	let lib = Dict.get("Rand" gdict)
	Dict.set("fiftyFifty" fiftyFifty lib)
	Dict.set("scramble" scramble lib)
end

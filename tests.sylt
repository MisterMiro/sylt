
let names() = do
	let value = "whatever"
	
	let name = value
	let Name = value
	let NAME = value
	let _name = value
	let _name_ = value
	let name123 = value
	let name_123 = value
	
	## names that start with keywords
	let nilpotent = value
	let true_to_life = value
	let falsetto = value
	let letter = value
	let funambulism = value
	let iffy = value
	let elsewhere = value
	let andante = value
	let oracle = value
	let usingasong = value
	let doable = value
	let enderman = value
end

let strings() = do
	let empty = ""
	let alpha = "abcDEFGHijklMNOPqrstUVWxyz"
	
	## all escape sequences...
	let hex = "\x41"
	let backslash = "\\"
	let quote = "\""
	let tab = "\t"
	let newline = "\n"
	let carriage_return = "\r"
	let null = "\0"
	
	## ...translate properly
	ensure(hex = "A")
	ensure(backslash = "\x5c")
	ensure(quote = "\x22")
	ensure(tab = "\x09")
	ensure(newline = "\x0a")
	ensure(carriage_return = "\x0d")
	ensure(null = "\x00")
end

let numbers() = do
	let integer = 123456789
	let fractional = 3.141592
end

let precedence() = do
	## multiplication > addition
	ensure(5 * 2 + 8 = 18)
	ensure(5 / 2 + 8 = 10.5)
	ensure(5 % 2 + 8 = 9)
	
	ensure(10 * 2 - 8 = 12)
	ensure(10 / 2 - 8 = -3)
	ensure(10 % 2 - 8 = -8)
	
	## addition > comparison
	ensure(1 < 1 + 1)
	ensure(1 <= 1 + 1)
	ensure(2 > 1 - 1)
	ensure(2 >= 1 - 1)
	
	## comparison > equality
	ensure(true = 1 < 2)
	ensure(true = 1 <= 2)
	ensure(true != 1 > 2)
	ensure(true != 1 >= 2)
end

let addition() = do
	let x = 8
	let y = 12
	
	## correct result
	let sum = 20
	ensure(x + y = sum)
	
	## commutative
	ensure(y + x = sum)
	ensure(x + y = y + x)
end

let subtraction() = do
	let x = 20
	let y = 12
	
	## correct result
	let difference = 8
	ensure(x - y = difference)
	
	## not commutative
	ensure(y - x != difference)
	ensure(x - y != y - x)
end

let multiplication() = do
	let x = 5
	let y = 16
	
	## correct result
	let product = 80
	ensure(x * y = product)
	
	## commutative
	ensure(y * x = product)
	ensure(x * y = y * x)
end

let division() = do
	let x = 33
	let y = 3
	
	## correct result
	let quotient = 11
	ensure(x / y = quotient)
	
	## not commutative
	ensure(y / x != quotient)
	ensure(x / y != y / x)
end

let remainder() = do
	let x = 17
	let y = 12
	
	## correct result
	let remainder = 5
	ensure(x % y = remainder)
	
	## not commutative
	ensure(y % x != remainder)
	ensure(x % y != y % x)
	
	## remainder is always positive
	ensure(7 % 3 = 1)
	ensure(7 % -3 = 1)
	ensure(-7 % 3 = 2)
	ensure(-7 % -3 = 2)
end

let unaryMinus() = do
	let x = 25
	ensure(-x = 0 - x)
	
	## double negative
	ensure(--x = x)
	
	## quadruple negative
	ensure(----x = x)
end

let arithmetic() = do
	let a = 1
	let b = a + 2
	ensure(a + b = a - (-b))
end

let comparison() = do
	let hi = 100
	let lo = -100
	
	ensure(lo < hi)
	ensure(lo <= hi)
	
	ensure(hi > lo)
	ensure(hi >= lo)
	
	let same = 70
	ensure(same <= same)
	ensure(same >= same)
end

let equality() = do
	## contains a value of each type
	let values = [
		nil        ## Nil
		true       ## Bool
		235	    ## Num
		[123]	  	## List
		"'_'"	  	## String
		fun x -> x	## Func
	]
	
	List.iter(fun skip value -> do
		## equal to itself
		ensure(value = value)
		
		## not equal to a value of any other
		## type
		List.iter(fun index other -> if index != skip: ensure(value != other) values)
	end values)
	
	## perform more type-specific tests
	ensure(true != false)
	
	ensure([] = [])
	ensure([[]] = [[]])
	ensure([0] != [1])
	
	ensure("" = "")
	ensure("ABC" != "abc")
	
	ensure(Math.pow != Math.sqrt)
end

let boolNot() = do
	ensure(true = !false)
	ensure(false = !true)
	ensure(!!true = true)
end

let boolAnd() = do
	ensure((false and false) = false)
	ensure((false and true) = false)
	ensure((true and false) = false)
	ensure((true and true) = true)
	
	## short-circuit evaluation
	let would_crash() = ensure(false)
	false and would_crash()
end

let boolOr() = do
	ensure((false or false) = false)
	ensure((false or true) = true)
	ensure((true or false) = true)
	ensure((true or true) = true)
	
	## short-circuit evaluation
	let would_crash() = ensure(false)
	true or would_crash()
end

let concat() = do
	ensure("Hello " + "Word" = "Hello Word")
	ensure([1 2] + [3 4] = [1 2 3 4])
end

let variables() = do
	## declaring
	let x = 70
	
	## accessing
	ensure(x = 70)
	
	## shadowing
	let x = x - 2
	ensure(x = 68)
	
	## assigning local
	x <- 14
	ensure(x = 14)
	
	## assigning open upvalue
	let y = 888
	let func() = do
		y <- 333
	end
	func()
	ensure(y = 333)
	
	## assigning closed upvalue
	let out() = do
		let z = 4
		let in() =
			z <- 900
		in
	end
	let z = out()()
	ensure(z = 900)
	
	## chaining assignments
	let a = nil
	let b = nil
	let c = nil
	a <- b <- c <- 32
	ensure(a = 32 and b = 32 and c = 32)
end

let blocks() = do
	## empty block returns nil
	let result = do end
	ensure(result = nil)
	
	## last expression is returned...
	let result = do 123 end
	ensure(result = 123)
	
	## ...variables do not break anything...
	let result = do
		let v1 = 13
		let v2 = 17
		123
	end
	ensure(result = 123)
	
	## ...and neither do captured values
	let c = 35
	let result = do
		let v = 9
		let sum = c + v
		123
	end
	ensure(result = 123)
	
	## assigning shadowed variable
	let x = true
	do
		let x = nil
		x <- false
		ensure(x = false)
	end
	ensure(x = true)
end

let lists() = do
	let list = [1 2 3]
end

let dicts() = do
	let dict = {"a": 1 "b": 2 "c": 3}
	
	## dot access
	ensure(Dict.get("a" dict) = dict.a)
end

let functions() = do
	## empty body returns nil
	let empty() = do end
	ensure(empty() = nil)
	
	## argument passing
	let add(a b) = a + b
	ensure(add(3 4) = 7)
	
	## arguments + local variables
	let add(a b) = do
		let stack_mate = 18
		a + b
	end
	ensure(add(3 4) = 7)
	
	## accessing variable outside of
	## a functions stack window
	let outside = "outside"
	let f() = outside
	ensure(f() = outside)
	
	## moving surrounding context to
	## the heap if necessary
	let f() = do
		let keep = "jewel"
		let f2() = keep
		f2
	end
	ensure(f()() = "jewel")
	
	## anonymous functions using 'fun'
	let anon = fun r s t -> r * s * t
	ensure(anon(2 4 8) = 64)
	
	## recursion
	let clear(ls) = if ls != []: do
		List.pop(ls)
		clear(ls)
	end
		
	let nums = [1 2 3]
	clear(nums)
	ensure(nums = [])
end

let ifElse() = do
	## implicit nil
	ensure((if false: do end) = nil)
	
	## if branch
	let result = if true: "A" else "B"
	ensure(result = "A")
	
	## else branch
	let result = if false: "A" else "B"
	ensure(result = "B")
	
	## else if / chaining
	let i = 10
	let result =
		if i < 0: "A"
		else if i > 0: "B"
		else "C"
	ensure(result = "B")
end

let whileLoop() = do
	let list = []
	let n = 1
	let res = while n <= 3: do
		List.push(n list)
		n <- n + 1
	end
	ensure(res = nil)
	ensure(list = [1 2 3])
end

let preludeLib() = do
	## toString
	ensure(toString(nil) = "nil")
	ensure(toString(true) = "true" and toString(false) = "false")
	ensure(toString(707) = "707")
	ensure(toString(["bananas" 18 true]) = "[\"bananas\" 18 true]")
	ensure(toString(printLn) = "printLn")
	
	## toNum
	ensure(toNum(nil) = 0)
	ensure(toNum(true) = 1)
	ensure(toNum(false) = 0)
	ensure(toNum(112) = 112)
	ensure(toNum("1337.25") = 1337.25)
	ensure(toNum("") = 0)
	ensure(toNum("error") = 0)
	ensure(toNum([1 2 4]) = 0)
	ensure(toNum(fun _ -> do end) = 0)
	
	## typeOf
	ensure(typeOf(nil) = "Nil")
	ensure(typeOf(true) = "Bool")
	ensure(typeOf(1) = "Num")
	ensure(typeOf([]) = "List")
	ensure(typeOf("") = "String")
	ensure(typeOf(fun -> do end) = "Function")
	
	## rep
	let nums = []
	rep(fun i -> List.push(i nums) 3)
	ensure(nums = [0 1 2])
end

let fileLib() = do
	let path = "sylt_test_file.txt"
	let str = "Hey\n"
	
	## open + write + close
	let handle = File.open(path "w")
	File.write(handle str)
	File.close(handle)
	
	## size
	let handle = File.open(path "r")
	let size = File.size(handle)
	ensure(size = String.length(str))
	File.close(handle)
	
	## read
	let handle = File.open(path "r")
	let contents = File.read(handle size)
	ensure(contents = str)
	File.close(handle)
	
	## del
	File.del(path)
end

let listLib() = do
	## length
	ensure(List.length([]) = 0)
	ensure(List.length([1]) = 1)
	ensure(List.length([1 2]) = 2)

	## get + set
	let ls = [1 2 3]
	ensure(List.get(0 ls) = 1)
	ensure(List.get(1 ls) = 2)
	ensure(List.get(2 ls) = 3)

	List.set(0 4 ls)
	List.set(1 5 ls)
	List.set(2 6 ls)
	ensure(ls = [4 5 6])

	## swap
	let ls = [-5 5]
	List.swap(0 1 ls)
	##ensure(ls = [5 -5])

	## add
	let x = [1 3 4]
	List.add(1 2 x)
	ensure(x = [1 2 3 4])
	
	List.add(-1 5 x)
	ensure(x = [1 2 3 4 5])
	
	let x = [1 2 3]
	List.add(0 1 x)
	ensure(x = [1 1 2 3])
	
	## del
	let x = [1 2 3]
	List.del(1 x)
	ensure(x = [1 3])
	
	List.del(0 x)
	ensure(x = [3])
	
	List.del(0 x)
	ensure(x = [])
	
	## push + pop
	let x = []
	
	List.push(3 x) ## = [3]
	ensure(x = [3] and List.length(x) = 1)
	List.push(7 x) ## = [3 7]
	ensure(x = [3 7] and List.length(x) = 2)
	
	List.pop(x) ## = [3]
	ensure(x = [3] and List.length(x) = 1)
	List.pop(x) ## = []
	ensure(x = [] and List.length(x) = 0)
	
	## first + last
	let list = ["first" "middle" "last"]
	ensure(List.first(list) = "first")
	ensure(List.last(list) = "last")
	
	## count
	let bits = [1 0 0 1 0 1 1 1]
	ensure(List.count(1 bits) = 5)
	
	## contains
	let list = ["a" "B" "c"]
	ensure(List.contains("B" list))
	ensure(!List.contains("b" list))
	
	## rev
	let normal = [1 2 3]
	ensure(List.rev(normal) = [3 2 1])
	ensure(List.rev([]) = [])
	ensure(List.rev([1]) = [1])
	
	## range
	let a = List.range(-3 3)
	let b = [-3 -2 -1 0 1 2 3]
	ensure(a = b)
	
	## iter
	let indices = [0 1 2]
	let copy = []
	List.iter(fun index value -> do
		ensure(index = indices[index])
		List.push(value copy)
	end indices)
	ensure(indices = copy)
	
	## forEach
	let items = [1 2 3]
	let copy = []
	List.forEach(fun index -> List.push(index copy) items)
	ensure(items = copy)
	
	## map
	##let list = List.map(fun n -> n * 2 [4 8 16])
	##ensure(list = [8 16 32])
	
	## filter
	let list = [1 0 0 1 1 0]
	list <- List.filter(isOne list)
	ensure(list = [1 1 1])
	
	## fold
	let list = [2 4 6]
	ensure(List.fold(mul 1 list) = 48)
	
	## sum
	let list = [1 2 3]
	ensure(List.sum(list) = 6)
	
	## average
	let list = [1 2 3]
	ensure(List.average(list) = 2)
	ensure(List.average([]) = 0)
	
	## mean
	let vals = [0 5 10 0]
	ensure(List.mean(vals) = 7.5)
	
	## flatten
	##let mess = [1 [2 [3 4]] 5]
	##let clean = List.flatten(mess)
	##ensure(clean = [1 2 3 4 5])
	
	## dedup
	let list = [7 7 8 9 9]
	ensure(List.dedup(list) = [7 8 9])
	
	## any
	let set = [true true false]
	ensure(List.any(fun v -> v set))
	ensure(List.any(fun v -> !v set))
	List.pop(set) ## = [true true]
	ensure(List.any(fun v -> v set))
	ensure(!List.any(fun v -> !v set))
	
	## all
	let set = [5 7]
	ensure(List.all(fun n -> n >= 5 set))
	ensure(List.all(fun n -> !(n < 5) set))
	List.push(3 set) ## = [5 7 3]
	ensure(!List.all(fun n -> n >= 5 set))
	ensure(!List.all(fun n -> !(n < 5) set))
end

let dictLib() = do
	let dict = {
		"door": "window"
		"car": "helicopter"
		"box": "pyramid"
	}
	
	## length
	ensure(Dict.length(dict) = 3)
	
	## keys
	ensure(Dict.keys(dict) = ["door" "car" "box"])
		
	## values
	ensure(Dict.values(dict) = ["window" "helicopter" "pyramid"])
end

let stringLib() = do
	## alpha
	let str = "abcdefghijklmnopqrstuvwxyz"
	ensure(String.letters = str)
	
	## digits
	let str = "0123456789"
	ensure(String.digits = str)

	## punctuation
	let str = "!\"#$%&'()*+-./:;<=>?@[\\]^_`{|}~"
	ensure(String.punctuation = str)
	
	## length
	ensure(String.length(String.digits) = 10)

	## chars + join
	ensure(String.chars("Abc") = ["A" "b" "c"])
	ensure(String.join(["A" "b" "c"]) = "Abc")
	ensure(String.join([1 "2" 34 "5"]) = "12345")
		
	## split
	ensure(String.split("lol" "") = ["lol"])
	ensure(String.split("lol" " ") = ["lol"])
	ensure(String.split("abcrstxyz" "") = ["abc" "rst" "xyz"])
		
	## lower + upper + swapCase
	let str = "MiXeD!"
	ensure(String.lower(str) = "mixed!")
	ensure(String.upper(str) = "MIXED!")
	ensure(String.swapCase(str) = "mIxEd!")

	## isLower + isUpper + isWhitespace
	ensure(String.isLower("x") and !String.isLower("X"))
	ensure(String.isUpper("X") and !String.isUpper("x"))
	ensure(String.isWhitespace(" \t\n\r"))
	
	## startsWith
	ensure(String.startsWith(String.letters "abc"))
	ensure(!String.startsWith(String.letters "xyz"))
		
	## endsWith
	ensure(String.endsWith(String.letters "xyz"))
	ensure(!String.endsWith(String.letters "abc"))
		
	## trimStart
	ensure(String.trimStart("\t\n hi") = "hi")
	ensure(String.trimStart("hi") = "hi")
	
	## trimEnd
	ensure(String.trimEnd("hi \n\t") = "hi")
	ensure(String.trimEnd("hi") = "hi")
	
	## trim
	ensure(String.trim("\n\t hi \n\t") = "hi")
	ensure(String.trim("hi") = "hi")
	
	## replace
	let str = "Country: SE"
	str <- String.replace(str "SE" "Sweden")
	ensure(str = "Country: Sweden")
	
	str <- String.replace(str "Sweden" "SE")
	ensure(str = "Country: SE")
	
	str <- "leet"
	str <- String.replace(str "l" "1")
	str <- String.replace(str "e" "3")
	str <- String.replace(str "t" "7")
	ensure(str = "1337")
	
	## leftPad
	ensure(String.leftPad("test" 10 "-=") = "-=-=-=test")

	## rightPad
	ensure(String.rightPad("test" 10 "*") = "test******")
	
	## centerPad
	ensure(String.centerPad("test" 10 "|") = "|||test|||")
		
	## fmt
	ensure(String.fmt("x=%1 + 2%") = "x=3")
end

let mathLib() = do
	## pi
	ensure(floatEq(Math.pi 3.141592 0.00001))
	
	## euler's number
	ensure(floatEq(Math.e 2.718281 0.00001))
	
	## floatEq
	let val = 0.005
	let epsilon = 0.01
	
	ensure(floatEq(0 val epsilon))
	ensure(floatEq(0 epsilon - 0.0000001 epsilon))
	ensure(!floatEq(0 epsilon epsilon))
	
	## numSign
	ensure(Math.numSign(-80) = -1)
	ensure(Math.numSign(0) = 0)
	ensure(Math.numSign(80) = 1)
	
	## abs
	ensure(Math.abs(-8) = 8 and Math.abs(8) = 8)
	
	## log + pow
	let target = 8
	let bases = [
		## common
		2 Math.e 10
		## uncommon
		3 14 2000 18000 2000000
	]
	
	List.forEach(fun base -> do
		let power = Math.log(target base)
		let result = Math.pow(base power)
		ensure(floatEq(result target 0.0000001))
	end bases)
	
	## sqrt
	ensure(Math.sqrt(256) = 16)
	ensure(Math.pow(32 0.5) = Math.sqrt(32))
	
	## min + max
	ensure(Math.min(-1 1) = -1)
	ensure(Math.max(-1 1) = 1)
	
	## clamp
	let x = 2
	ensure(Math.clamp(x -5 5) = x)
	
	let x = 20
	ensure(Math.clamp(x 1 4) = 4)
	
	let x = -12
	ensure(Math.clamp(x -8 3) = -8)
	
	## lerp
	ensure(Math.lerp(-10 10 0) = -10)
	ensure(Math.lerp(-10 10 0.25) = -5)
	ensure(Math.lerp(-10 10 0.5) = 0)
	ensure(Math.lerp(-10 10 0.75) = 5)
	ensure(Math.lerp(-10 10 1) = 10)
	
	## floor + ceil + round
	let checkRounding(n) = do
		let low = n + 0.2
		let mid = n + 0.5
		let high = n + 0.8
	
		ensure(Math.floor(low) = n)
		ensure(Math.floor(high) = n)
		ensure(Math.ceil(low) = n + 1)
		ensure(Math.ceil(high) = n + 1)
		ensure(Math.round(low) = n)
		ensure(Math.round(high) = n + 1)
	
		ensure(Math.round(mid) = if n < 0: n else n + 1)
	end
	
	##List.forEach(checkRounding [-1 0 1])
	
	## rad + deg
	ensure(floatEq(Math.rad(1) 0.0175 0.001))
	ensure(floatEq(Math.deg(1) 57.296 0.001))
	
	## sin + cos + tan
	ensure(floatEq(Math.sin(90) 0.8939 0.001))
	ensure(floatEq(Math.cos(90) -0.4480 0.001))
	ensure(floatEq(Math.tan(90) -1.9952 0.001))
			
	## asin + acos + atan
	ensure(floatEq(Math.asin(1) 1.5708 0.001))
	ensure(floatEq(Math.acos(1) 0 0.001))
	ensure(floatEq(Math.atan(1) 0.785398 0.001))
		
	## sinh + cosh + tanh
	ensure(floatEq(Math.sinh(1) 1.1752 0.001))
	ensure(floatEq(Math.cosh(1) 1.5430 0.001))
	ensure(floatEq(Math.tanh(1) 0.7615 0.001))
	
	## asinh + acosh + atanh
	ensure(floatEq(Math.asinh(0.8) 0.7326 0.001))
	ensure(floatEq(Math.acosh(1.2) 0.6223 0.001))
	ensure(floatEq(Math.atanh(0.8) 1.0986 0.001))
end

## tests to run

let tests = List.flatten([
	"Parsing"	## category name
	[			## functions to test
		names
		strings
		numbers
		precedence
	]
	"Operators"
	[
		addition
		subtraction
		multiplication
		division
		remainder
		unaryMinus
		arithmetic
		comparison
		equality
		boolNot
		##boolAnd
		boolOr
		concat
	]
	"General"
	[
		variables
		blocks
		lists
		dicts
		functions
		ifElse
		whileLoop
	]
	"Standard library"
	[
		preludeLib
		##fileLib
		listLib
		dictLib
		stringLib
		mathLib
	]
])

## let's go!
List.forEach(fun test ->
	if typeOf(test) = "String": do
		printLn(String.fmt("%test%:"))
		
	end
	else do
		let name = String.rightPad(toString(test) 20 ".")
		print(String.fmt("  %name%"))
		
		test()
		printLn("OK")
	end
	tests)

printLn("All tests passed!")


## calls f n times, passing the current
## iteration count to f
let rep(n, f) = {
	let i = 0
	while (i < n) {
		f(i)
		i <- i + 1
	}
}

## calls f for each item in the list,
## passing the index as the first argument,
## and the item as the second
let List.iter(list, f) = {
	rep(List.length(list), fun(i) ->
		f(i, list[i]))
}

## calls f for each item in the list,
## passing the item as the argument
let List.forEach(list, f) = {
	rep(List.length(list), fun(i) ->
		f(list[i]))
}

## passes each value in the list through f
let List.map(list, f) = {
	let mapped = []
	List.forEach(list, fun(value) ->
		List.push(mapped, f(value))
	)
	
	mapped
}

## returns a list containing all values
## that pass the predicate f
let List.filter(list, f) = {
	let filtered = []
	List.forEach(list, fun(value) ->
		if (f(value))
			List.push(filtered, value)
	)
	
	filtered
}

## reduces a list down to a single value,
## with an initial value of init,
## passing the current accumulator as the
## first argument to f, and the current item
## as the second
let List.fold(list, init, f) = {
	let folded = init
	List.forEach(list, fun(value) ->
		folded <- f(folded, value)
	)
	
	folded
}

## returns the sum of all numbers in a list
let List.sum(list) = {
	List.fold(list, 0, fun(sum, value) ->
		sum + value)
}

## returns the average value in a list
## of numbers
let List.average(list) =
	List.sum(list) / List.length(list)

## returns a version of the original
## list with any nested lists flattened out
let List.flatten(list) = {
	let flat = []
	List.forEach(list, fun(item) ->
		if (typeOf(item) = "List") {
			let child = List.flatten(item)
			flat <- List.concat(flat, child)
		} else List.push(flat, item)
	)
	
	flat
}

## returns true if any value in the list
## satisfies the predicate f
let List.any(list, f) = {
	let loop(i) =
		if (i < List.length(list)) {
			if (f(list[i])) true
			else loop(i + 1)
		} else false
		
	loop(0)
}

## returns true if all values in the list
## satisfy the predicate f
let List.all(list, f) = {
	let loop(i) =
		if (i < List.length(list)) {
			if (!f(list[i])) false
			else loop(i + 1)
		} else true
		
	loop(0)
}

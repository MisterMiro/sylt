
## note: most of the standard library is implemented in C
ensure(System.version is "sylt 0.1")

## Prelude

let isZero num = num is 0
let isOne num = num is 1
let isEven num = isZero(num % 2)
let isOdd num = isOne(num % 2)
let isPositive num = Math.signum(num) is Math.Sign.Positive
let isNegative num = Math.signum(num) is Math.Sign.Negative

let half num = num / 2
let twice num = num * 2
let squared num = num * num

let add a b = a + b
let sub a b = a - b
let mul a b = a * b
let div a b = a / b
let rem a b = a % b

let rep fn n = do
	let i = 0
	while i < n: do
		fn(i)
		i += 1
	end
end

let makeEnum list = do
	let enum = {}
	List.iter(
        fun index name -> Dict.set(name index enum)
        list)
	enum
end

module List is
	let iter fn list = rep(
        fun index -> fn(index List.get(index list))
        #list)

	let forEach fn list = rep(
        fun index -> fn(List.get(index list))
        #list)

	let map fn list = do
		let mapped = []
		List.forEach(
            fun item -> mapped += fn(item)
            list)
		mapped
	end

	let filter fn list = do
		let filtered = []
		List.forEach(
            fun item -> if fn(item): filtered += item
            list)
		filtered
	end

	let fold fn init list = do
		let result = init
		List.forEach(
            fun item -> result <- fn(result item)
            list)
		result
	end

	let sum list = List.fold(add 0 list)

	let average list =
        if list is []: 0
        else List.sum(list) / #list

	let mean list =
        if isOdd(#list): List.get(#list / 2 list)
		else List.average([
			List.get(#list / 2 - 1 list)
			List.get(#list / 2 list)])

	let sortBy fn list = do
		let bubbleSort list n = do
			let swapped = 0

			rep(fun i -> do
				if fn(List.get(i list) List.get(i + 1 list)): do
					List.swap(i i + 1 list)
					swapped += 1
				end
			end n - 1)

			if not isZero(swapped): bubbleSort(list n - 1)
		end

		if #list > 1: bubbleSort(list #list)
	end

	let sort list = sortBy(fun a b -> a > b list)

	let flatten list = do
		let flat = []
		List.forEach(
            fun item -> flat +=
                if typeOf(item) is "List": List.flatten(item)
                else item
            list)
		flat
	end

	let dedup list = do
		let deduped = []
		List.forEach(
            fun item -> if not List.contains(item deduped):
                deduped += item
            list)
		deduped
	end

	let any fn list = List.fold(
        fun any value -> any or fn(value)
        false
        list)

	let all fn list =
        if list is []: false
        else List.fold(
            fun all value -> all and fn(value)
            true
            list)

	let lib = Dict.get("List" gdict)
	Dict.set("iter" iter lib)
	Dict.set("forEach" forEach lib)
	Dict.set("map" map lib)
	Dict.set("filter" filter lib)
	Dict.set("fold" fold lib)
	Dict.set("sum" sum lib)
	Dict.set("average" average lib)
	Dict.set("mean" mean lib)
	Dict.set("sortBy" sortBy lib)
	Dict.set("sort" sort lib)
	Dict.set("flatten" flatten lib)
	Dict.set("dedup" dedup lib)
	Dict.set("any" any lib)
	Dict.set("all" all lib)
end

module Dict is
	let getOrDefault key default dict =
        if Dict.hasKey(key dict): Dict.get(key dict)
        else default

	let iter fn dict = List.forEach(
        fun key -> fn(key Dict.get(key dict))
        Dict.keys(dc))

	let toList dict = do
		let ls = []
		Dict.iter(fun k v -> ls += [[k v]] dict)
		ls
	end

	let lib = Dict.get("Dict" gdict)
	Dict.set("getOrDefault" getOrDefault lib)
	Dict.set("iter" iter lib)
	Dict.set("toList" toList lib)
end

module String is
	let leftPad str w pattern = do
		let text = ""
		let n = (w - #str) / #pattern

		rep(fun _ -> text += pattern n)
		text + str
	end

	let rightPad str w pattern = do
		let text = str
		let n = (w - #str) / #pattern

		rep(fun _ -> text += pattern n)
		text
	end

	let centerPad str w pattern = do
		let text = ""
		let n = (w - #str) / #pattern

		rep(fun _ -> text += pattern half(n))
		text += str
		rep(fun _ -> text += pattern half(n))
		text
	end

	let lib = Dict.get("String" gdict)
	Dict.set("leftPad" leftPad lib)
	Dict.set("rightPad" rightPad lib)
	Dict.set("centerPad" centerPad lib)
end

module File is
	let Mode = makeEnum([
		"Read"
		"ReadBinary"
		"Write"
		"WriteBinary"
		"Append"
		"AppendBinary"
	])

	let lib = Dict.get("File" gdict)
	Dict.set("Mode" Mode lib)
end

module Math is
	let Sign = makeEnum(["Negative" "Zero" "Positive"])

	let signum n = if n < 0: Sign.Negative
		else if n is 0: Sign.Zero
		else Sign.Positive

	let lib = Dict.get("Math" gdict)
	Dict.set("Sign" Sign lib)
	Dict.set("signum" signum lib)
end

module Vec3 is
	let new x y z = {
		"x": x
		"y": y
		"z": z
	}

	let dot a b = a.x * b.x + a.y * b.y + a.z * b.z

	let cross a b = Vec3.new(
		a.y * b.z - a.z * b.y
		a.z * b.x - a.x * b.z
		a.x * b.y - a.y * b.x)

	let sizeSquared v = Vec3.dot(v v)

	let size v = Math.sqrt(sizeSquared(v))

	let norm v = Vec3.new(
		v.x / Vec3.size(v)
		v.y / Vec3.size(v)
		v.z / Vec3.size(v))

	let add a b = Vec3.new(
		a.x + b.x
		a.y + b.y
		a.z + b.z)

	let sub a b = Vec3.new(
		a.x - b.x
		a.y - b.y
		a.z - b.z)

	let mul a b = Vec3.new(
		a.x * b.x
		a.y * b.y
		a.z * b.z)

	let div a b = Vec3.new(
		a.x / b.x
		a.y / b.y
		a.z / b.z)

	let addScalar v s = Vec3.new(
		v.x + s
		v.y + s
		v.z + s)

	let subScalar v s = Vec3.new(
		v.x - s
		v.y - s
		v.z - s)

	let mulScalar v s = Vec3.new(
		v.x * s
		v.y * s
		v.z * s)

	let divScalar v s = Vec3.new(
		v.x / s
		v.y / s
		v.z / s)

	let lib = Dict.get("Vec3" gdict)
	Dict.set("new" new lib)
	Dict.set("dot" dot lib)
	Dict.set("cross" cross lib)
	Dict.set("sizeSquared" sizeSquared lib)
	Dict.set("size" size lib)
	Dict.set("norm" norm lib)
	Dict.set("add" add lib)
	Dict.set("sub" sub lib)
	Dict.set("mul" mul lib)
	Dict.set("div" mul lib)
	Dict.set("addScalar" addScalar lib)
	Dict.set("subScalar" subScalar lib)
	Dict.set("mulScalar" mulScalar lib)
	Dict.set("divScalar" divScalar lib)
end

module Rand is
	let fiftyFifty _ = Rand.range(0 1) > 0.5
	let oneIn n = Rand.range(0 n) < 1
	let item list = List.get(Rand.range(0 #list) list)
	let scramble list = List.sortBy(fun _ _ -> fiftyFifty() list)

	let lib = Dict.get("Rand" gdict)
	Dict.set("fiftyFifty" fiftyFifty lib)
	Dict.set("oneIn" oneIn lib)
	Dict.set("item" item lib)
	Dict.set("scramble" scramble lib)
end

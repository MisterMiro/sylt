
let rep(n, f) = {
	let i = 0
	while (i < n) {
		f(i)
		i <- i + 1
	}
}

let List.forEach(list, f) = {
	rep(List.length(list), fun(i) ->
		f(i, list[i]))
}

let List.map(list, f) = {
	let result = []
	List.forEach(list, fun(i, value) ->
		List.push(result, f(value))
	)
	result
}

let List.filter(list, f) = {
	let result = []
	List.forEach(list, fun(_, value) ->
		if (f(value))
			List.push(result, value)
	)
	result
}

let List.fold(list, init, f) = {
	let result = init
	List.forEach(list, fun(_, value) ->
		result <- f(result, value)
	)
	result
}

let List.sum(list) = {
	List.fold(list, 0, fun(sum, value) ->
		sum + value)
}

let List.flatten(list) = {
	let result = []
	List.forEach(list, fun(i, item) ->
		if (typeOf(item) = "List") {
			result <- List.concat(result,
					List.flatten(item))
		} else List.push(result, item)
	)
		
	result
}

let List.any(list, f) = {
	let loop(i) =
		if (i < List.length(list)) {
			if (f(list[i])) true
			else loop(i + 1)
		} else false
		
	loop(0)
}

let List.all(list, f) = {
	let loop(i) =
		if (i < List.length(list)) {
			if (!f(list[i])) false
			else loop(i + 1)
		} else true
		
	loop(0)
}

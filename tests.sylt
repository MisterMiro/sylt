
## implementations of some higher-order
## functions; these will be moved to
## native code in the future

let rep(n, f) = {
	let loop(i) =
		if (i < n) {
			f(i)
			loop(i + 1)
		}
	
	loop(0)
}

let forEach(list, f) = {
	let loop(i) =
		if (i < length(list)) {
			f(i, list[i])
			loop(i + 1)
		}
		
	loop(0)
}

let map(list, f) = {
	let result = []
	forEach(list, fun(i, value) ->
		push(result, f(value))
	)
	result
}

let concat(a, b) = {
	let result = []
	forEach(a, fun(_, v) -> push(result, v))
	forEach(b, fun(_, v) -> push(result, v))
	result
}

let flatten(list) = {
	let result = []
	forEach(list, fun(i, item) ->
		if (typeOf(item) = "List") {
			result <-
				concat(result, flatten(item))
		} else push(result, item)
	)
		
	result
}

let any(list, f) = {
	let loop(i) =
		if (i < length(list)) {
			if (f(list[i])) true
			else loop(i + 1)
		} else false
		
	loop(0)
}

let all(list, f) = {
	let loop(i) =
		if (i < length(list)) {
			if (!f(list[i])) false
			else loop(i + 1)
		} else true
		
	loop(0)
}

## test functions

let names() = {
	let value = "whatever"
	
	let name = value
	let Name = value
	let NAME = value
	let _name = value
	let _name_ = value
	let name123 = value
	let name_123 = value
	
	## names that start with keywords
	let nilpotent = value
	let true_to_life = value
	let falsetto = value
	let letter = value
	let funambulism = value
	let iffy = value
	let elsewhere = value
	let matchmaker = value
	let withdrawer = value
	let andante = value
	let oracle = value
}

let strings() = {
	let empty = ""
	let alpha = "abcDEFGHijklMNOPqrstUVWxyz"
	
	## all escape sequences...
	let hex = "\x41"
	let backslash = "\\"
	let quote = "\""
	let tab = "\t"
	let newline = "\n"
	let carriage_return = "\r"
	let null = "\0"
	
	## ...translate properly
	ensure(hex = "A")
	ensure(backslash = "\x5c")
	ensure(quote = "\x22")
	ensure(tab = "\x09")
	ensure(newline = "\x0a")
	ensure(carriage_return = "\x0d")
	ensure(null = "\x00")
}

let numbers() = {
	let integer = 123456789
	let fractional = 3.141592
}

let precedence() = {
	## multiplication > addition
	ensure(5 * 2 + 8 = 18)
	ensure(5 / 2 + 8 = 10.5)
	ensure(5 % 2 + 8 = 9)
	
	ensure(10 * 2 - 8 = 12)
	ensure(10 / 2 - 8 = -3)
	ensure(10 % 2 - 8 = -8)
	
	## addition > comparison
	ensure(1 < 1 + 1)
	ensure(1 <= 1 + 1)
	ensure(2 > 1 - 1)
	ensure(2 >= 1 - 1)
	
	## comparison > equality
	ensure(true = 1 < 2)
	ensure(true = 1 <= 2)
	ensure(true != 1 > 2)
	ensure(true != 1 >= 2)
}

let addition() = {
	let x = 8
	let y = 12
	
	## correct result
	let sum = 20
	ensure(x + y = sum)
	
	## commutative
	ensure(y + x = sum)
	ensure(x + y = y + x)
}

let subtraction() = {
	let x = 20
	let y = 12
	
	## correct result
	let difference = 8
	ensure(x - y = difference)
	
	## not commutative
	ensure(y - x != difference)
	ensure(x - y != y - x)
}

let multiplication() = {
	let x = 5
	let y = 16
	
	## correct result
	let product = 80
	ensure(x * y = product)
	
	## commutative
	ensure(y * x = product)
	ensure(x * y = y * x)
}

let division() = {
	let x = 33
	let y = 3
	
	## correct result
	let quotient = 11
	ensure(x / y = quotient)
	
	## not commutative
	ensure(y / x != quotient)
	ensure(x / y != y / x)
}

let remainder() = {
	let x = 17
	let y = 12
	
	## correct result
	let remainder = 5
	ensure(x % y = remainder)
	
	## not commutative
	ensure(y % x != remainder)
	ensure(x % y != y % x)
	
	## remainder is always positive
	ensure(7 % 3 = 1)
	ensure(7 % -3 = 1)
	ensure(-7 % 3 = 2)
	ensure(-7 % -3 = 2)
}

let unaryMinus() = {
	let x = 25
	ensure(-x = 0 - x)
	
	## double negative
	ensure(--x = x)
	
	## quadruple negative
	ensure(----x = x)
}

let arithmetic() = {
	let a = 1
	let b = a + 2
	ensure(a + b = a - (-b))
}

let comparison() = {
	let hi = 100
	let lo = -100
	
	ensure(lo < hi)
	ensure(lo <= hi)
	
	ensure(hi > lo)
	ensure(hi >= lo)
	
	let same = 70
	ensure(same <= same)
	ensure(same >= same)
}

let equality() = {
	let func_val() = 1 > 2
	
	## contains a value of each type
	let values = [
		nil,        ## Nil
		true,       ## Bool
		235,	    ## Num
		[123],	  ## List
		"'_'",	  ## String
		func_val,   ## Func
	]
	
	forEach(values, fun(skip, value) -> {
		## equal to itself
		ensure(value = value)
		
		## not equal to a value of any other
		## type
		forEach(values, fun(index, other) ->
			if (index != skip)
				ensure(value != other)
		)
	})
	
	## perform more type-specific tests
	ensure(true != false)
	
	ensure([] = [])
	ensure([[]] = [[]])
	ensure([0] != [1])
	
	ensure("" = "")
	ensure("ABC" != "abc")
	
	ensure(raise != sqrt)
}

let boolNot() = {
	ensure(true = !false)
	ensure(false = !true)
	ensure(!!true = true)
}

let boolAnd() = {
	ensure((false and false) = false)
	ensure((false and true) = false)
	ensure((true and false) = false)
	ensure((true and true) = true)
	
	## short-circuit evaluation
	let would_crash() = ensure(false)
	false and would_crash()
}

let boolOr() = {
	ensure((false or false) = false)
	ensure((false or true) = true)
	ensure((true or false) = true)
	ensure((true or true) = true)
	
	## short-circuit evaluation
	let would_crash() = ensure(false)
	true or would_crash()
}

let variables() = {
	## declaring
	let x = 70
	
	## accessing
	ensure(x = 70)
	
	## shadowing
	let x = x - 2
	ensure(x = 68)
	
	## assigning local
	x <- 14
	ensure(x = 14)
	
	## assigning open upvalue
	let y = 888
	let func() =
		y <- 333
	func()
	ensure(y = 333)
	
	## assigning closed upvalue
	let out() = {
		let z = 4
		let in() =
			z <- 900
		in
	}
	let z = out()()
	ensure(z = 900)
	
	## chaining assignments
	let a = nil
	let b = nil
	let c = nil
	a <- b <- c <- 32
	ensure(a = 32 and b = 32 and c = 32)
}

let blocks() = {
	## empty block returns nil
	let result = {}
	ensure(result = nil)
	
	## last expression is returned...
	let result = {123}
	ensure(result = 123)
	
	## ...variables do not break anything...
	let result = {
		let v1 = 13
		let v2 = 17
		123
	}
	ensure(result = 123)
	
	## ...and neither do captured values
	let c = 35
	let result = {
		let v = 9
		let sum = c + v
		123
	}
	ensure(result = 123)
	
	## assigning shadowed variable
	let x = true
	{
		let x = nil
		x <- false
		ensure(x = false)
	}
	ensure(x = true)
}

let lists() = {
	let list = [1, 2, 3]
	
	## indexing
	ensure(list[0] = 1
		and list[1] = 2
		and list[2] = 3)
		
	## negative indices count from the end
	## i.e. index -1 is equivalent to len - 1
	ensure(list[1] = list[-2])
	
	## assignment
	list[0] <- list[-1]
	list[1] <- list[-1]
	ensure(list = [3, 3, 3])
}

let functions() = {
	## empty body returns nil
	let empty() = {}
	ensure(empty() = nil)
	
	## argument passing
	let add(a, b) = a + b
	ensure(add(3, 4) = 7)
	
	## arguments + local variables
	let add(a, b) = {
		let stack_mate = 18
		a + b
	}
	ensure(add(3, 4) = 7)
	
	## accessing variable outside of
	## a functions stack window
	let outside = "outside"
	let f() = outside
	ensure(f() = outside)
	
	## moving surrounding context to
	## the heap if necessary
	let f() = {
		let keep = "jewel"
		let f2() = keep
		f2
	}
	ensure(f()() = "jewel")
	
	## anonymous functions using 'fun'
	let anon = fun(r, s, t) -> r * s * t
	ensure(anon(2, 4, 8) = 64)
	
	## recursion
	let clear(ls) =
		if (length(ls) > 0) {
			pop(ls)
			clear(ls)
		}
		
	let list = [1, 2, 3]
	clear(list)
	ensure(length(list) = 0)
}

let gcStress() = {
	let size = 1024
	let rec(oldList, i) = {
		if (i < size) {
			let newList = []
			rep(size / 64, fun(_) ->
				push(newList, oldList))
			rec(new_list, i + 1)
		}
	}
	
	rec([1, 2, 3, 4, 5, 6, 7, 8], 0)
}

let ifElse() = {
	## implicit nil
	ensure((if (false) {}) = nil)
	
	## if branch
	let result = if (true) "A" else "B"
	ensure(result = "A")
	
	## else branch
	let result = if (false) "A" else "B"
	ensure(result = "B")
	
	## else if / chaining
	let i = 10
	let result =
		if (i < 0) "A"
		else if (i > 0) "B"
		else "C"
	ensure(result = "B")
}

let matchWith() = {
	## wildcard only
	let result =
		match "Anything" with
		? -> "Wildcard"
	ensure(result = "Wildcard")
	
	## match first arm
	let result =
		match 100 with
		| 100 -> "Success"
		| 150 -> "Fail"
		| 200 -> "Fail"
		? -> nil
	ensure(result = "Success")
	
	## match middle arm
	let result =
		match 150 with
		| 100 -> "Fail"
		| 150 -> "Success"
		| 200 -> "Fail"
		? -> nil
	ensure(result = "Success")
	
	## match last arm
	let result =
		match 200 with
		| 100 -> "Fail"
		| 150 -> "Fail"
		| 200 -> "Success"
		? -> nil
	ensure(result = "Success")
	
	## match three arms + wildcard
	let name(num) =
		match num with
		| 0 -> "Zero"
		| 1 -> "One"
		| 2 -> "Two"
		? -> "?"
		
	ensure(name(0) = "Zero")
	ensure(name(1) = "One")
	ensure(name(2) = "Two")
	ensure(name(3) = "?")
}

let preludeLib() = {
	## asString
	ensure(asString(nil) = "nil")
	ensure(asString(true) = "true"
		and asString(false) = "false")
	ensure(asString(707) = "707")
	ensure(asString(["bananas", 18, true])
		= "<List>")
	##	= "[\"bananas\", 18, true]")
	ensure(asString(asString) = "asString()")
	
	## typeOf
	ensure(typeOf(nil) = "Nil")
	ensure(typeOf(true) = "Bool")
	ensure(typeOf(1) = "Num")
	ensure(typeOf([]) = "List")
	ensure(typeOf("") = "String")
	ensure(typeOf(fun() -> {}) = "Func")
	
	## rep
	let nums = []
	rep(3, fun(i) -> push(nums, (i + 1) * 3))
	ensure(nums = [3, 6, 9])
}

let listLib() = {
	## length
	ensure(length([]) = 0)
	ensure(length([1]) = 1)
	ensure(length([1, 2]) = 2)
	
	## push and pop
	let x = []
	
	push(x, 3) ## = [3]
	ensure(x = [3] and length(x) = 1)
	push(x, 7) ## = [3, 7]
	ensure(x = [3, 7] and length(x) = 2)
	
	## concat
	let a = [1, 2]
	let b = [3, 4]
	let concatenated = concat(a, b)
	ensure(concatenated = [1, 2, 3, 4])
	
	## each
	let indices = [0, 1, 2]
	let copy = []
	forEach(indices, fun(index, value) -> {
		ensure(index = indices[index])
		push(copy, value)
	})
	ensure(copy = indices)
	
	## map
	let list = map([4, 8], fun(x) -> x * 2)
	ensure(list = [8, 16])

	## flatten
	let mess = [1, [2, [3, 4]], 5]
	let clean = flatten(mess)
	ensure(clean = [1, 2, 3, 4, 5])
	
	## any
	let set = [true, true, false]
	ensure(any(set, fun(v) -> v))
	ensure(any(set, fun(v) -> !v))
	pop(set) ## = [true, true]
	ensure(any(set, fun(v) -> v))
	ensure(!any(set, fun(v) -> !v))
	
	## all
	let set = [5, 7]
	ensure(all(set, fun(n) -> n >= 5))
	ensure(all(set, fun(n) -> !(n < 5)))
	push(set, 3) ## = [5, 7, 3]
	ensure(!all(set, fun(n) -> n >= 5))
	ensure(!all(set, fun(n) -> !(n < 5)))
}

let stringLib() = {
	## chars
	ensure(chars("Abc") = ["A", "b", "c"])
}

let mathLib() = {
	## pi
	ensure(closeTo(PI, 3.141592, 0.001))
	
	## euler's number
	ensure(closeTo(E, 2.718281, 0.001))
	
	## closeTo
	let zero = 0
	let val = 0.005
	let epsilon = 0.01
	
	ensure(closeTo(zero, val, epsilon))
	ensure(!closeTo(zero, epsilon, epsilon))
	
	## numSign
	ensure(numSign(-80) = -1)
	ensure(numSign(0) = 0)
	ensure(numSign(80) = 1)
	
	## abs
	ensure(abs(-8) = 8 and abs(8) = 8)
	
	## log and raise
	let target = 8
	let bases = [
		## common
		2, E, 10,
		## uncommon
		3, 14, 2000, 18000, 2000000,
	]
	
	let logRaise(base, target) = {
		let power = log(target, base)
		let result = raise(base, power)
		ensure(closeTo(result, target, 0.001))
	}
	
	forEach(bases, fun(_, base) ->
		logRaise(base, target))
	
	## sqrt
	ensure(sqrt(256) = 16)
	ensure(raise(32, 0.5) = sqrt(32))
	
	## min and max
	ensure(min(-1, 1) = -1)
	ensure(max(-1, 1) = 1)
	
	## clamp
	let x = 2
	ensure(clamp(x, -5, 5) = x)
	
	let x = 20
	ensure(clamp(x, 1, 4) = 4)
	
	let x = -12
	ensure(clamp(x, -8, 3) = -8)
	
	## floor, ceil, and round
	let checkRounding(n) = {
		let low = n + 0.2
		let mid = n + 0.5
		let high = n + 0.8
	
		ensure(floor(low) = n)
		ensure(floor(high) = n)
	
		ensure(ceil(low) = n + 1)
		ensure(ceil(high) = n + 1)
	
		ensure(round(low) = n)
		ensure(round(high) = n + 1)
	
		ensure(round(mid) =
			if (n < 0) n
			else n + 1
		)
	}
	
	checkRounding(-4)
	checkRounding(0)
	checkRounding(4)
	
	## rad and deg
	ensure(closeTo(rad(1), 0.0175, 0.001))
	ensure(closeTo(deg(1), 57.296, 0.001))
	
	## sin, cos, tan
	ensure(closeTo(sin(90), 0.8939, 0.001))
	ensure(closeTo(cos(90), -0.4480, 0.001))
	ensure(closeTo(tan(90), -1.9952, 0.001))
}

## tests to run

let run = flatten([
	"Parser",	## category name
	[			## functions to test
		names,
		strings,
		numbers,
		precedence,
	],
	"Numbers",
	[
		addition,
		subtraction,
		multiplication,
		division,
		remainder,
		unaryMinus,
		arithmetic,
	],
	"Booleans",
	[
		comparison,
		equality,
		boolNot,
		boolAnd,
		boolOr,
	],
	"General",
	[
		variables,
		blocks,
		lists,
		functions,
		gcStress,
	],
	"Control flow",
	[
		ifElse,
		matchWith,
	],
	"Standard library",
	[
		preludeLib,
		listLib,
		stringLib,
		mathLib,
	],
])

## number of times to run each test
let iterations = 1
ensure(iterations > 0)

## let's go!
forEach(run, fun(_, val) ->
	if (typeOf(val) = "String") {
		let title = val
		put(title)
		putLn(":")
		
	} else {
		let test = val
		let name = asString(test)
		put("  ")
		put(name)
		
		## align
		let width = 20
		let len = length(chars(name))
		rep(width - len, fun(_) -> put("."))
		
		## run it
		rep(iterations, fun(_) -> val())
		
		putLn("OK")
	}
)

putLn("All tests passed!")

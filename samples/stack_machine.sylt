## implementation of a calculator using a stack

let OpCode = makeEnum([
    "Push"
    "Add"
    "Sub"
    "Mul"
    "Div"
    "Eq"
    "Print"
    "Ret"
])

let exec program = do
    ensure(List.last(program) is OpCode.Ret)
    
    let ip = 0
    let stack = []

    let read = fun -> do
        let code = List.get(ip program)
        ip += 1
        code
    end

    let push value = List.push(value stack)
    let pop = fun -> List.pop(stack)

    let run = true
    while run: do
        let code = read()
        if code is OpCode.Push: stack += read()
        else if code is OpCode.Add: do
            let b = pop()
            let a = pop()
            push(a + b)
        end
        else if code is OpCode.Sub: do
            let b = pop()
            let a = pop()
            push(a - b)
        end
        else if code is OpCode.Mul: do
            let b = pop()
            let a = pop()
            push(a * b)
        end
        else if code is OpCode.Div: do
            let b = pop()
            if b is 0: return "tried to divide a number by zero"
            let a = pop()
            push(a / b)
        end
        else if code is OpCode.Eq: do
            let b = pop()
            let a = pop()
            push(a is b)
        end
        else if code is OpCode.Print: printLn(List.last(stack))
        else if code is OpCode.Ret: run <- false
    end

    "success!"
end

let program = [
    OpCode.Push 1
    OpCode.Push 2
    OpCode.Add

    OpCode.Push 10
    OpCode.Mul

    OpCode.Push 0.9375
    OpCode.Div

    OpCode.Push 16
    OpCode.Sub

    OpCode.Push 8
    OpCode.Sub

    OpCode.Push 8
    OpCode.Eq

    OpCode.Print
    OpCode.Ret
]

let result = exec(program)
printLn(result)

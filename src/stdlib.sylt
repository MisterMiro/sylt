
## note: most of the standard library is implemented in C
ensure: System.version is "sylt 0.1"!

let for fn from to = do
    let i = from
	while i < to do
		fn: i!
		i += 1
	end
end

let rep fn n = for: fn 0 n!

let makeEnum list = do
	let enum = {}
	List.iteri: (fun i name -> Dict.set: name i enum!) list!
	enum
end

module List is
    let first list = List.get: 0 list!

    let last list = List.get: -1 list!

    let pop list = do
        let value = List.last: list!
        list -= 1
        value
    end

    let swap a b list = do
        let temp = List.get: a list!
        List.set: a (List.get: b list!) list!
        List.set: b temp list!
    end

    let init value n = do
        let list = []
        rep: (fun _ -> list += value) n!
        list
    end

    let range from to = do
        let list = []
        for: (fun num -> list += num) from to + 1!
        list
    end

	let iter fn list =
        rep: (fun i -> fn: (List.get: i list!)!) #list!

	let iteri fn list =
        rep: (fun i -> fn: i (List.get: i list!)!) #list!

    let copy original = do
        let new = []
        List.iter: (fun item -> new += item) original!
        new
    end

	let map fn list = do
		let mapped = []
		List.iter: (fun item -> mapped += fn: item!) list!
		mapped
	end

	let filter fn list = do
		let filtered = []
		List.iter: (fun item -> if fn: item! then filtered += item) list!
		filtered
	end

	let fold fn init list = do
		let result = init
		List.iter: (fun item -> result <- fn: result item!) list!
		result
	end

	let sum list = List.fold: Math.add 0 list!

	let average list = if list is [] then 0
        else (List.sum: list!) / #list

	let mean list = if Num.isOdd: #list! then List.get: (Num.half: #list!) list!
		else List.average: [
			List.get: (Num.half: #list!) - 1 list!
			List.get: (Num.half: #list!) list!]!

	let sortBy fn list = do
        if #list <= 1 then return list
        list <- List.copy: list!

		let bubbleSort list n = do
			let swapped = 0

			rep: fun i -> do
				if fn: (List.get: i list!) (List.get: i + 1 list!)! then do
					List.swap: i i + 1 list!
					swapped += 1
				end
			end
            n - 1!

			if not Num.isZero: swapped! then bubbleSort: list n - 1!
		end

		bubbleSort: list #list!
        list
	end

	let sort list = List.sortBy: (fun a b -> a > b) list!

	let flatten list = do
		let flat = []
		List.iter:
            (fun item -> flat +=
                if typeOf: item! is "List" then List.flatten: item!
                else item)
            list!
		flat
	end

	let dedup list = do
		let deduped = []
		List.iter:
            (fun item -> if not List.contains: item deduped! then
                deduped += item)
            list!
		deduped
	end

	let any fn list = List.fold:
        (fun any value -> any or fn: value!) false list!

	let all fn list = if list is [] then false
        else List.fold: (fun all value -> all and fn: value!) true list!

    let count value list = do
        let count = 0
        List.iter: (fun item -> if item is value then count += 1) list!
        count
    end

    let contains value list = List.count: value list! > 0

    let find value list = do
        let i = 0
        let found = false

        while not found and i < #list
            if List.get: i list! is value then found <- true
            else i += 1

        if not found then -1 else i
    end
end

module Dict is
	let getOrDefault key default dict = if Dict.hasKey: key dict! then Dict.get: key dict!
        else default

	let iter fn dict = List.iter:
        (fun key -> fn: key (Dict.get: key dict!)!) (Dict.keys: dict!)!

    let copy original = do
        let new = {}
        Dict.iter: (fun k v -> Dict.set: k v new!) original!
        new
    end

	let toList dict = do
		let ls = []
		Dict.iter: (fun k v -> ls += [[k v]]) dict!
		ls
	end
end

module String is
    let letters = "abcdefghijklmnopqrstuvwxyz"
    let digits = "0123456789"
    let punctuation = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
    let whitespace = " \n\r\t"

	let leftPad width pattern str = do
		let n = (width - #str) / #pattern

        let text = ""
		rep: (fun _ -> text += pattern) n!
		text + str
	end

	let rightPad width pattern str = do
		let n = (width - #str) / #pattern

        let text = str
		rep: (fun _ -> text += pattern) n!
		text
	end

	let centerPad width pattern str = do
		let n = (width - #str) / #pattern

        let text = ""
		rep: (fun _ -> text += pattern) (Num.half: n!)!
		text += str
		rep: (fun _ -> text += pattern) (Num.half: n!)!
		text
	end
end

module File is
	let Mode = makeEnum: [
		"Read"
		"ReadBinary"
		"Write"
		"WriteBinary"
		"Append"
		"AppendBinary"
	]!

    let readString path = do
        let handle = File.open: File.Mode.Read path!
        let result = File.read: handle!
        File.close: handle!
        result
    end

    let writeString str path = do
        let handle = File.open: File.Mode.Write path!
        File.write: str handle!
        File.close: handle!
    end
end

module Num is
    let eq a b epsilon = if a is b then true
        else Math.abs: a - b! < epsilon

    let next num = num + 1
    let prev num = num - 1

    let half num = num / 2
    let twice num = num * 2
    let squared num = num * num

    let isZero num = num is 0
    let isOne num = num is 1
    let isEven num = Num.isZero: num % 2!
    let isOdd num = Num.isOne: num % 2!
    let isPositive num = Math.signum: num! is 1
    let isNegative num = Math.signum: num! is -1
end

module Math is
    let pi = 3.14159265358979323846264338327950288
    let e = 2.71828182845904523536028747135266250

    let add a b = a + b
    let sub a b = a - b
    let mul a b = a * b
    let div a b = a / b
    let rem a b = a % b

	let signum n = if n < 0 then -1
		else if n is 0 then 0
		else 1

    let min a b = if a < b then a else b

    let max a b = if a > b then a else b

    let clamp x lo hi = if x < lo then lo
        else if x > hi then hi
        else x

    let lerp a b t = a * (1 - t) + b * t
end

module Vec3 is
	let new x y z = {
		"x" = x
		"y" = y
		"z" = z
	}

    let scalar s = Vec3.new: s s s!

    let zero = fun -> Vec3.scalar: 0!

    let one = fun -> Vec3.scalar: 1!

	let dot a b = a.x * b.x + a.y * b.y + a.z * b.z

	let cross a b = Vec3.new:
		a.y * b.z - a.z * b.y
		a.z * b.x - a.x * b.z
		a.x * b.y - a.y * b.x!

	let sizeSquared v = Vec3.dot: v v!

	let size v = Math.sqrt: (Vec3.sizeSquared: v!)!

	let norm v = Vec3.new:
		v.x / (Vec3.size: v!)
		v.y / (Vec3.size: v!)
		v.z / (Vec3.size: v!)!

    let dir from to = Vec3.norm: (Vec3.sub: to from!)!

	let add a b = Vec3.new:
		a.x + b.x
		a.y + b.y
		a.z + b.z!

	let sub a b = Vec3.new:
		a.x - b.x
		a.y - b.y
		a.z - b.z!

	let mul a b = Vec3.new:
		a.x * b.x
		a.y * b.y
		a.z * b.z!

	let div a b = Vec3.new:
		a.x / b.x
		a.y / b.y
		a.z / b.z!
end

module Rand is
	let oneIn n = Rand.range: 0 n! < 1

    let fiftyFifty = fun -> Rand.oneIn: 2!

	let item list = List.get: (Rand.range: 0 #list!) list!

	let scramble list = List.sortBy: fun _ _ -> (Rand.fiftyFifty: !) list!
end
